using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace m4a2s
{
    class Song
    {
        public static void disassemble(Hashtable index, Entity song, string destFile)
        {
            StringBuilder oasm = new StringBuilder();

            oasm.AppendLine("@ File generated by m4a2s Song-Module");
            
            // read header information from ROM
            
            int songOffset = song.Offset;

            Rom.Reader.BaseStream.Position = songOffset;

            byte numTracks = (byte) Rom.Reader.ReadByte();
            byte numBlocks = (byte) Rom.Reader.ReadByte(); // as usual, the usage of this byte is unknown
            byte priority = (byte) Rom.Reader.ReadByte();
            byte reverb = (byte) Rom.Reader.ReadByte();

            int vgrOffset = Rom.Reader.ReadInt32() - Rom.Map;
            int[] trackOffsets = new int[numTracks];

            for (int i = 0; i < numTracks; i++)
            {
                trackOffsets[i] = Rom.Reader.ReadInt32() - Rom.Map;
            }

            oasm.AppendLine("\t.include \"MPlayDef.s\"");
            oasm.AppendLine();
            oasm.AppendLine("\t.equ\t" + song.Guid + "_grp, " + index[vgrOffset].Guid);
            oasm.AppendLine("\t.equ\t" + song.Guid + "_pri, " + priority);
            oasm.AppendLine("\t.equ\t" + song.Guid + "_rev, " + reverb);
            oasm.AppendLine("\t.equ\t" + song.Guid + "_mvl, 127");
            oasm.AppendLine("\t.equ\t" + song.Guid + "_key, 0");
            oasm.AppendLine();
            oasm.AppendLine("\t.section .rodata");
            oasm.AppendLine("\t.global\t" + song.Guid);
            oasm.AppendLine("\t.align\t2");
            oasm.AppendLine();


            for (int cTrack = 0; cTrack < numTracks; cTrack++)
            {
                oasm.AppendLine("@*********************** Track " + (cTrack + 1).toString("D2") + " ***********************@");
                oasm.AppendLine();
                oasm.AppendLine(song.Guid + "_" + cTrack + ":");
                
                // set reader position
                Rom.Reader.BaseStream.Position = trackOffsets[cTrack]; 

                while(true)
                {
                    byte cmd = Rom.Reader.ReadByte();
                    
                    // if delay
                    if (cmd >= 0x80 && cmd <= (0x80 + 48))
                    {
                        oasm.AppendLine("\t.byte\t" + Tables.Wxx[cmd - 0x80]);
                    }
                    // if FINE
                    else if (cmd == 0xB1)
                    {
                        oasm.AppendLine("\t.byte\tFINE");
                    }
                    // if GOTO
                    else if (cmd == 0xB2)
                    {
                        oasm.AppendLine("\t.byte\tGOTO");
                        int targetPosition = Rom.Reader.ReadInt32() - Rom.Map;
                        oasm.AppendLine("\t .word\t" + song.Guid + "_" + cTrack + " + 0x" + (targetPosition - trackOffsets[cTrack]).ToString("X"))
                    }
                    // if PATT
                    else if (cmd == 0xB3)
                    {
                        oasm.AppendLine("\t.byte\tPATT");
                        int targetPosition = Rom.Reader.ReadInt32() - Rom.Map;
                        oasm.AppendLine("\t .word\t" + song.Guid + "_" + cTrack + " + 0x" + (targetPosition - trackOffsets[cTrack]).ToString("X"));
                    }
                    // if PEND
                    else if (cmd == 0xB4)
                    {
                        oasm.AppendLine("\t.byte\tPEND");
                    }
                    // if REPT
                    else if (cmd == 0xB5)
                    {
                        byte numRepeats = (byte) Rom.Reader.ReadByte();
                        oasm.AppendLine("\t.byte\tREPT  , " + numRepeats);
                        int targetPosition = Rom.Reader.ReadInt32() - Rom.Map;
                        oasm.AppendLine("\t .word\t" + song.Guid + "_" + cTrack + " + 0x" + (targetPosition - trackOffsets[cTrack]).ToString("X"));
                    }
                    // if MEMACC
                    else if (cmd == 0xB9)
                    {
                        throw new NotImplementedException(); // TODO
                    }
                    // if PRIO
                    else if (cmd == 0xBA)
                    {
                        byte prio = (byte) Rom.Reader.ReadByte();
                        oasm.AppendLine("\t.byte\tPRIO  , " + prio);
                    }
                    // if TEMPO
                    else if (cmd == 0xBB)
                    {
                        int speed = Rom.Reader.ReadByte() * 2;
                        oasm.AppendLine("\t.byte\tTEMPO , " + speed + "/2");
                    }
                    // if KEYSH
                    else if (cmd == 0xBC)
                    {
                        int shift = Rom.Reader.ReadSByte();
                        string str;
                        if (shift < 0) str = shift.ToString();
                        else str = "+" + shift.ToString();
                        oasm.AppendLine("\t.byte\tKEYSH , " + song.Guid + "_key" + str);
                    }
                    /*
                     * from here repeatable commands will follow
                     */
                    // if VOICE
                    else if (cmd == 0xBD)
                    {
                        
                    }
                    // if VOL
                    else if (cmd == 0xBE)
                    {

                    }
                    // if PAN
                    else if (cmd == 0xBF)
                    {

                    }
                    // if BEND
                    else if (cmd == 0xC0)
                    {

                    }
                    // if BENDR
                    else if (cmd == 0xC1)
                    {

                    }
                    // if LFOS
                    else if (cmd == 0xC2)
                    {

                    }
                    // if LFODL
                    else if (cmd == 0xC3)
                    {

                    }
                    // if MOD
                    else if (cmd == 0xC4)
                    {

                    }
                    // if MODT
                    else if (cmd == 0xC5)
                    {
                        
                    }
                    // if TUNE
                    else if (cmd == 0xC8)
                    {

                    }
                    // if XCMD
                    else if (cmd == 0xCD)
                    {

                    }
                    // if EOT
                    else if (cmd == 0xCE)
                    {

                    }
                    // if TIE
                    else if (cmd == 0xCF)
                    {

                    }
                    // if NOTE
                    else if (cmd >= 0xD0 && cmd <= (0xD0 + 47))
                    {

                    }
                    // if an unsupported command occurs
                    else
                    {
                        throw new Exception("Unsupported command 0x" + cmd.ToString("X2") 
                                + " at offset 0x" + (Rom.Reader.BaseStream.Position - 1).ToString("X7") 
                                + " on track " + cTrack 
                                + " from song-header at 0x" + song.Offset.ToString("X7"));
                    }
                }
            }

            oasm.AppendLine("@******************************************************@");
            oasm.AppendLine();
            oasm.AppendLine("\t.align\t2");
            oasm.AppendLine();
            oasm.AppendLine(song.Guid + ":");

            oasm.AppendLine("\t.byte\t" + numTracks + "\t@ NumTrks");
            oasm.AppendLine("\t.byte\t" + numBlocks + "\t@ NumBlks");
            oasm.AppendLine("\t.byte\t" + song.Guid + "_pri\t@ Priority");
            oasm.AppendLine("\t.byte\t" + song.Guid + "_rev\t@ Reverb");
            oasm.AppendLine();
            oasm.AppendLine("\t.word\t" + song.Guid + "_grp");
            oasm.AppendLine();

            for (int i = 0, i < numTracks; i++)               
            {
                oasm.AppendLine("\t.word\t" + song.Guid + "_" + i);
            }

            oasm.AppendLine();
            oasm.AppendLine("\t.end");
        }
    }
}
